$ For the declaration construction:     . t v = expr $

. // <

$ --    t can be type #, ?, *, _#, _?, _*, [#], [?], [*], _[#], _[?]
        and _[*] (see TYPE SPECIFICATION). $
    $ O.F. $

$ --    var has type t $
    $ N.T. $

$ --    expr has to be an expression of type t (see TYPE
        SPECIFICATION). $
    $ O.F. $

$ --    A variable of type #, ?, *, _#, _? or _* can be declared with
        and without immediate assignment of a value. If no value is
        given, the variable will automatically be assigned the
        default value associated with its declaration type:
        TYPE        DEFAULT VALUE
        #           0
        ?           \
        *           '\NUL'
        _# (#)      0
        _? (?)      \
        _* (*)      '\NUL' $
    . # p
    . ? q
    . * r
    . # < p . * < '\n'$ PRINT: 0 $
    . ? < q . * < '\n'$ PRINT: \ $
    . * < r . * < '\n'$ PRINT:  $

$ --    An array can be declared without explicitly indicating the
        values (see Arrays). In this case, every variable in the
        array is set to the default value of its type. $
    . [#] s = [3]
    . [?] t = [3]
    . [*] u = [3]
    . [#] < s . * < '\n'$ PRINT: [0,0,0] $
    . [?] < t . * < '\n'$ PRINT: ... $
    . [*] < u . * < '\n'$ PRINT: ... $

$ --    The declaration type has to be explicitly indicated in the
        declaration statement. $
    $ N.T. $

>
